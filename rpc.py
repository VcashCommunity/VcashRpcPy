# !/usr/bin/python
# -*- coding: utf-8 -*-

import requests
import json
import sys


# Internal method that executes an rpc command
def call_rpc(payload):
    try:
        url = "http://127.0.0.1:9195"
        headers = {'content-type': 'application/json'}
        response = requests.post(url, data=json.dumps(payload), headers=headers).json()
        return response
    except requests.exceptions.RequestException as e:
        print(e)
        sys.exit(1)


def rpc_getinfo():
    # getinfo
    payload = {
        "method": "getinfo",
        "params": [],
        "jsonrpc": "2.0",
        "id": 1,
    }
    response = call_rpc(payload)
    return response


def rpc_getbalance():
    # getbalance
    payload = {
        "method": "getbalance",
        "params": [],
        "jsonrpc": "2.0",
        "id": 1,
    }
    response = call_rpc(payload)
    return response


def rpc_getnewaddress():
    # getnewaddress
    payload = {
        "method": "getnewaddress",
        "params": [],
        "jsonrpc": "2.0",
        "id": 1,
    }
    response = call_rpc(payload)
    return response


def rpc_listtransactions(account="*", count_tx="80", from_tx="0"):
    # listtransactions
    payload = {
        "method": "listtransactions",
        "params": [account, count_tx, from_tx],
        "jsonrpc": "2.0",
        "id": 1,
    }
    response = call_rpc(payload)
    return response


def rpc_listreceivedbyaddress():
    # listreceivedbyaddress
    payload = {
        "method": "listreceivedbyaddress",
        "params": [5],
        "jsonrpc": "2.0",
        "id": 1,
    }
    response = call_rpc(payload)
    return response


def rpc_gettransaction(txid):
    # gettransaction
    payload = {
        "method": "gettransaction",
        "params": [txid],
        "jsonrpc": "2.0",
        "id": 1,
    }
    response = call_rpc(payload)
    return response


def rpc_validateaddress(address):
    # validateaddress
    payload = {
        "method": "validateaddress",
        "params": [address],
        "jsonrpc": "2.0",
        "id": 1,
    }
    response = call_rpc(payload)
    return response


def rpc_getblockcount():
    # getblockcount
    payload = {
        "method": "getblockcount",
        "params": [],
        "jsonrpc": "2.0",
        "id": 1,
    }
    response = call_rpc(payload)
    return response


def rpc_getdifficulty():
    # getdifficulty
    payload = {
        "method": "getdifficulty",
        "params": [],
        "jsonrpc": "2.0",
        "id": 1,
    }
    response = call_rpc(payload)
    return response


def rpc_sendtoaddress(address, amount):
    # WARNING: USE WITH CAUTION
    # sendtoaddress
    payload = {
        "method": "sendtoaddress",
        "params": [address, amount],
        "jsonrpc": "2.0",
        "id": 1,
    }
    response = call_rpc(payload)
    return response


def check_received(address):
    # Check if address has received funds from user
    # address is generated by rpc_getnewaddress() (New empty address)
    # Triple check: listreceivedbyaddress, listtransactions, gettransaction
    status_received = False
    amount = 0
    user_address = None
    # Check if address has received funds in recent transaction
    response = rpc_listreceivedbyaddress()
    for received in response['result']:
        if received['address'] == address:
            # address found, get the amount
            amount = received['amount']
            break
    # After the check we will have all needed data (house_address, user_address, bet_amount)
    # Look for address in listtransactions
    if amount > 0:
        # Check the transaction and get user address.
        response = rpc_listtransactions()
        for trans in response['result']:
            if trans['address'] == address:
                # Transaction found
                txid = trans['txid']
                txdata = rpc_gettransaction(txid)
                user_address = txdata['result']['vout'][0]['scriptPubKey']['addresses'][0]
                break
    if amount > 0 and user_address is not None:
        status_received = True
    # Prepare data dictionary
    data = dict(received=status_received, house_address=address, user_address=user_address, amount=amount)
    return data


if __name__ == '__main__':
    # Demo, need a running vcash daemon
    print(repr(rpc_getinfo()))
    print(repr(rpc_getbalance()))
    print(repr(rpc_listreceivedbyaddress()))
    print(repr(rpc_listtransactions(count_tx="20", from_tx="10")))
    print(repr(rpc_getdifficulty()))
    print(repr(rpc_getblockcount()))

    # Just some random transaction example from explorer
    print(repr(rpc_gettransaction('ab95508f69d8a1b92b6ad503f9f37ab7f5e93faeb6ca43bbb4998df246a32d43')))

    import time
    start = time.time()
    # run your code
    print(repr(check_received('SOME_XVC_ADDRESS')))
    end = time.time()
    elapsed = end - start
    print("%.3f" % elapsed)
